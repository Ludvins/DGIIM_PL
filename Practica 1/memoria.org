#+options: toc:nil date:nil
#+BIND: org-latex-image-default-width 0.98\linewidth
#+TITLE: Lenguaje BABAA
#+AUTHOR: Luis Antonio Ortega Andrés @@latex: \\@@Guillermo Galindo Ortuño @@latex: \\@@ Johanna Capote Robayna@@latex: \\@@Antonio Coín Castro

#+LATEX_HEADER:\setlength{\parindent}{0in}
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LATEX_HEADER: \usepackage{mathtools}

* Descripción del lenguaje

La sintaxis de nuestro lenguaje está inspirada en el lenguaje *C*. Por ello, tomaremos como referencia las reglas sintácticas de este para las instrucciones del nuevo lenguaje.

Para las palabras reservadas usaremos el lenguaje *castellano*.

En nuestro lenguaje implementaremos los *arrays 1D y 2D* como estructura de datos. Este tipo de datos tendrán las siguientes operaciones.

+ Acceso a elemento.
+ Producto.
+ Suma y resta elemento a elemento.
+ Producto externo (producto de un array por un escalar).
+ Producto de matrices. Teniendo en cuenta que para multiplicar dos matrices, las dimensiones de estas deben ser las adecuadas.

Esta estructura solo puede tener tipos básicos en su interior (entero, carácter, real y booleano).

* Descripción formal de la sintaxis del lenguaje usando BNF

#+BEGIN_SRC bnf
<Programa>                    #::= <Cabecera_programa> <Bloque>
<Bloque>                      #::= <Inicio_de_bloque>
                              #    <Declar_de_variables_locales>
                              #    <Declar_de_subprogs>
                              #    <Sentencias>
                              #    <Fin_de_bloque>
<Declar_de_subprogs>          #::= <Declar_de_subprogs> <Declar_subprog>
                              #| vacio
<Declar_subprog>              #::= <Cabecera_subprograma> <Bloque>
<Declar_de_variables_locales> #::= <Marca_ini_declar_variables>
                              #    <Variables_locales>
                              #    <Marca_fin_declar_variables>
                              #| vacio
<Marca_ini_declar_variables>  #::= var
<Marca_fin_declar_variables>  #::= finvar
<Cabecera_programa>           #::= programa()
<Inicio_de_bloque>            #::= {
<Fin_de_bloque>               #::= }
<Variables_locales>           #::= <Variables_locales> <Cuerpo_declar_variable>;
                              #|   <Cuerpo_declar_variable>;
<Cuerpo_declar_variable>      #::= <Tipo> <Identificador>
                              #| <Tipo> <Identificador> = <Expresion>
                              #| <Tipo> <Identificador>[<Natural>]
                              #| <Tipo> <Identificador>[<Natural>,<Natural>]
                              #| <Tipo> <Identificador>[] = <Agregado1D>
                              #| <Tipo> <Identificador>[,] = <Agregado2D>

<Cabecera_subprog>            #::= <Tipo> <Identificador>(<Lista_argumentos>)
<Lista_argumentos>            #::= <Argumentos>
                              #|
<Argumentos>                  #::= <Argumento> , <Argumentos>
                              #| <Argumento>
<Argumento>                   #::= <Tipo> <Identificador>
<Signo>                       #::= -
                              #| vacio
<Booleano>                    #::= Verdadero | Falso
<Digito>                      #::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<Natural>                     #::= <Digito> <Natural>
                              #| <Digito>
<Entero>                      #::= <Signo> <Natural>
<Real>                        #::= <Entero>.<Natural>
<Caracter>                    #::= a | ... | z | A | ... | Z | _
<Alfanum>                     #::= <Caracter>
                              #| <Natural>
<Caracter_ascii>              #::= (Cualquier carácter ASCII)
<Cadena>                      #::= <Cadena> <Caracter_ascii>
                              #| <Caracter_ascii>
<Cadena_const>                #::= "<Cadena>"
<Constante>                   #::= <Natural>
                              #| <Entero>
                              #| <Real>
                              #| <Booleano>
                              #| <Cadena_const>
                              #| '<Caracter_ascii>'
<Tipo>                        #::= entero
                              #| real
                              #| buleano
                              #| caracter
<Identificador>               #::= <Identificador> <Alfanum>
                              #| <Caracter>
<Expresion>                   #::= (<Expresion>)
                              #| <Identificador>
                              #| <Constante>
                              #| <Op_unario_izquierda> <Expresion>
                              #| <Expresion> <Op_unario_derecha>
                              #| <Expresion> <Op_binario> <Expresion>
                              #| <Agregado1D>
                              #| <Agregado2D>
                              #| <Llamada_subprograma>
<Agregado1D>                  #::= {<Lista_expresiones>}
<Agregado2D>                  #::= {<Listas> ; <Lista_expresiones>}
<Listas>                      #::= <Listas> ; <Lista_expresiones>
                              #| <Lista_expresiones>
<Lista_expresiones>           #::= <Expresiones>
                              #|
<Expresiones>                 #::= <Expresion>, <Expresiones>
                              #| <Expresion>
<Llamada_subprograma>         #::= <Identificador>(<Lista_expresiones>)
<Op_unario_izquierda>         #::= !
                              #| -
                              #| ++
                              #| --
<Acceso_array>                #::= [<Natural>]
                              #|   [<Natural>,<Natural>]
<Identificador_comp>          #::= <Identificador>
                              #|   <Identificador><Acceso_array>
<Op_unario_derecha>           #::= ++
                              #| --
                              #| <Acceso_array>
<Op_binario>                  #::= ==
                              #| >=
                              #| <=
                              #| !=
                              #| +
                              #| -
                              #| *
                              #| /
                              #| **
                              #| ^
                              #| <
                              #| >
                              #| &&
                              #| ||
<Sentencias>                  #::= <Sentencias> <Sentencia>
                              #| vacio
<Sentencia>                   #::= <Bloque>
                              #|   <Expresion>;
                              #|   <Sentencia_asignacion>
                              #|   <Sentencia_if>
                              #|   <Sentencia_while>
                              #|   <Sentencia switch>
                              #|   <Sentencia_break>
                              #|   <Sentencia_entrada>
                              #|   <Sentencia_salida>
<Sentencia_asignacion>        #::= <Identificador_comp> = <Expresion>;
<Sentencia_if>                #::= si (<Expresion>) <Sentencia> <Sentencia_else>
<Sentencia_else>              #::= otro <Sentencia>
                              #|
<Sentencia_while>             #::= mientras (<Expresion>) <Sentencia>
<Sentencia_switch>            #::= casos (<Expresion>) <Bloque_switch>
<Bloque_switch>               #::= { <Opciones> }
<Opciones>                    #::= <Opciones> <Opcion>
                              #| <Opcion>
<Opcion>                      #::= caso <Entero>: <Sentencias>
                              #| predeterminado: <Sentencias>
<Sentencia_break>             #::= break;
<Sentencia_entrada>           #::= entrada <Lista_id>;
<Lista_id>                    #::= <Lista_id>, <Identificador_comp>
                              #| <Identificador_comp>
<Sentencia_salida>            #::= salida <Expresiones>;
#+END_SRC

* Definición de la semántica en lenguaje natural.
El programa comienza con una cabecera inicial y un bloque. La cabecera inicial esta formada por la palabra reservada "programa" seguida de de paréntesis sin argumentos. Por otro lado el bloque empieza con "{" y termina "}", en su interior pueden aparecer variables locales, subprogramas o sentencias.
Las variables locales pueden ser ...

Los subprogramas...

Las sentencias pueden ser un bloque, una expresión o las instrucciones de control (si, otro, mientras, casos). Las instrucciones de control tienen una expresion y una sentencia.

La expresion puede encontrarse entre paréntesis, y puede ir precedido de una operación unaria o combinar dos expresiones con una operación binaria. Además puede ser una constante o un identificador.

Por último...
* Identificación de los tokens.
** Identificación de las palabras

** Identificación de los tokens.
