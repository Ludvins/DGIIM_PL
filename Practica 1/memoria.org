#+options: toc:nil date:nil
#+BIND: org-latex-image-default-width 0.98\linewidth
#+TITLE: Lenguaje BABAA
#+AUTHOR: Luis Antonio Ortega Andrés @@latex: \\@@Guillermo Galindo Ortuño @@latex: \\@@ Johanna Capote Robayna@@latex: \\@@Antonio Coín Castro

#+LATEX_HEADER:\setlength{\parindent}{0in}
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LATEX_HEADER: \usepackage{mathtools}

* Descripción del lenguaje

La sintaxis de nuestro lenguaje está inspirada en el lenguaje *C*. Por ello, tomaremos como referencia las reglas sintácticas de este para las instrucciones del nuevo lenguaje.

Para las palabras reservadas usaremos el lenguaje *castellano*.

En nuestro lenguaje implementaremos los *arrays 1D y 2D* como estructura de datos. Este tipo de datos tendrán las siguientes operaciones.

+ Acceso a elemento.
+ Producto.
+ Suma y resta elemento a elemento.
+ Producto externo (producto de un array por un escalar).
+ Producto de matrices. Teniendo en cuenta que para multiplicar dos matrices, las dimensiones de estas deben ser las adecuadas.

Esta estructura solo puede tener tipos básicos en su interior (entero, carácter, real y booleano).

El tipo de subprograma que contendrá nuestro lenguaje son *funciones*, es decir, supondremos que nuestro subprograma siempre devuelve un valor.

Por último, el lenguaje incluirá una estructura de control tipo *switch*.

* Descripción formal de la sintaxis del lenguaje usando BNF

#+BEGIN_SRC bnf
<Programa>                    ::= <Cabecera_programa> <Bloque>
<Bloque>                      ::= <Inicio_de_bloque>
                                  <Declar_de_variables_locales>
                                  <Declar_de_subprogs>
                                  <Sentencias>
                                  <Fin_de_bloque>
<Declar_de_subprogs>          ::= <Declar_de_subprogs> <Declar_subprog>
                              | vacio
<Declar_subprog>              ::= <Cabecera_subprograma> <Bloque>
<Declar_de_variables_locales> ::= <Marca_ini_declar_variables>
                                  <Variables_locales>
                                  <Marca_fin_declar_variables>
                              | vacio
<Marca_ini_declar_variables>  ::= var
<Marca_fin_declar_variables>  ::= finvar
<Cabecera_programa>           ::= programa()
<Inicio_de_bloque>            ::= {
<Fin_de_bloque>               ::= }
<Variables_locales>           ::= <Variables_locales> <Cuerpo_declar_variable>;
                              |   <Cuerpo_declar_variable>;
<Cuerpo_declar_variable>      ::= <Tipo> <Identificador>
                              | <Tipo> <Identificador> = <Expresion>
                              | <Tipo> <Identificador>[<Natural>]
                              | <Tipo> <Identificador>[<Natural>,<Natural>]
                              | <Tipo> <Identificador>[] = <Agregado1D>
                              | <Tipo> <Identificador>[,] = <Agregado2D>

<Cabecera_subprog>            ::= <Tipo> <Identificador>(<Lista_argumentos>)
<Lista_argumentos>            ::= <Argumentos>
                              |
<Argumentos>                  ::= <Argumento> , <Argumentos>
                              | <Argumento>
<Argumento>                   ::= <Tipo> <Identificador>
<Signo>                       ::= -
                              | vacio
<Booleano>                    ::= verdadero | falso
<Digito>                      ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<Natural>                     ::= <Digito> <Natural>
                              | <Digito>
<Entero>                      ::= <Signo> <Natural>
<Real>                        ::= <Entero>.<Natural>
<Caracter>                    ::= a | ... | z | A | ... | Z | _
<Alfanum>                     ::= <Caracter>
                              | <Natural>
<Caracter_ascii>              ::= (Cualquier carácter ASCII menos las comillas (' o "))
                              | \"
                              | \'
<Cadena>                      ::= <Cadena> <Caracter_ascii>
                              | <Caracter_ascii>
<Cadena_const>                ::= "<Cadena>"
<Constante>                   ::= <Natural>
                              | <Entero>
                              | <Real>
                              | <Booleano>
                              | <Cadena_const>
                              | '<Caracter_ascii>'
<Tipo>                        ::= entero
                              | real
                              | buleano
                              | caracter
<Identificador>               ::= <Identificador> <Alfanum>
                              | <Caracter>
<Expresion>                   ::= (<Expresion>)
                              | <Identificador>
                              | <Constante>
                              | <Op_unario_izquierda> <Expresion>
                              | <Expresion> <Op_unario_derecha>
                              | <Expresion> <Op_binario> <Expresion>
                              | <Agregado1D>
                              | <Agregado2D>
                              | <Llamada_funcion>
<Agregado1D>                  ::= {<Lista_expresiones>}
<Agregado2D>                  ::= {<Listas> ; <Lista_expresiones>}
<Listas>                      ::= <Listas> ; <Lista_expresiones>
                              | <Lista_expresiones>
<Lista_expresiones>           ::= <Expresiones>
                              |
<Expresiones>                 ::= <Expresion>, <Expresiones>
                              | <Expresion>
<Llamada_funcion>             ::= <Identificador>(<Lista_expresiones>)
<Op_unario_izquierda>         ::= !
                              | -
                              | ++
                              | --
<Acceso_array>                ::= [<Natural>]
                              |   [<Natural>,<Natural>]
<Identificador_comp>          ::= <Identificador>
                              |   <Identificador><Acceso_array>
<Op_unario_derecha>           ::= ++
                              | --
                              | <Acceso_array>
<Op_binario>                  ::= ==
                              | >=
                              | <=
                              | !=
                              | +
                              | -
                              | *
                              | /
                              | **
                              | ^
                              | <
                              | >
                              | &&
                              | ||
<Sentencias>                  ::= <Sentencias> <Sentencia>
                              | vacio
<Sentencia>                   ::= <Bloque>
                              |   <Expresion>;
                              |   <Sentencia_asignacion>
                              |   <Sentencia_if>
                              |   <Sentencia_while>
                              |   <Sentencia switch>
                              |   <Sentencia_break>
                              |   <Sentencia_return>
                              |   <Sentencia_entrada>
                              |   <Sentencia_salida>
<Sentencia_asignacion>        ::= <Identificador_comp> = <Expresion>;
<Sentencia_if>                ::= si (<Expresion>) <Sentencia> <Sentencia_else>
<Sentencia_else>              ::= otro <Sentencia>
                              |
<Sentencia_while>             ::= mientras (<Expresion>) <Sentencia>
<Sentencia_switch>            ::= casos (<Expresion>) <Bloque_switch>
<Bloque_switch>               ::= { <Opciones> }
<Opciones>                    ::= <Opciones> <Opcion>
                              | <Opcion>
<Opcion>                      ::= caso <Entero>: <Sentencias>
                              | predeterminado: <Sentencias>
<Sentencia_break>             ::= roto;
<Sentencia_return>            ::= devolver
<Sentencia_entrada>           ::= entrada <Lista_id>;
<Lista_id>                    ::= <Lista_id>, <Identificador_comp>
                              | <Identificador_comp>
<Sentencia_salida>            ::= salida <Expresiones>;
#+END_SRC

* Definición de la semántica en lenguaje natural.
El programa comienza con una cabecera inicial y un bloque. La cabecera inicial esta formada por la palabra reservada "programa" seguida de de paréntesis sin argumentos. Por otro lado el bloque empieza con "{" y termina "}", en su interior pueden aparecer variables locales, subprogramas o sentencias.

Las variables locales deben declararse entre unas marcas de inicio y fin, notadas como "var" y "finvar" respectivamente. Una vez dentro de las marcas, podemos declarar variables al estilo de C, e inicializarlas /in situ/:

```
<tipo> <id>;
<tipo> <id> = <expr>;
```

Los subprogramas son siempre funciones que devuelven algo. Constan de una cabecera ~<tipo> <nombre>(<argumentos>)~, donde los argumentos pueden ser 0 o más, separados por comas. El cuerpo de los subprogramas vuelve a ser un bloque, lo que permite anidamiento. Se devuelven los datos con la palabra clave 'devolver'.

Las sentencias pueden ser un bloque, una expresión o las instrucciones de control (si, otro, mientras, casos). Las instrucciones de control tienen una expresion y una sentencia. La sintaxis del 'switch' es una copia de la de C, teniendo en cuenta que los caso solo pueden ser números enteros.

La expresión puede encontrarse entre paréntesis, y puede ir precedido de una operación unaria o combinar dos expresiones con una operación binaria. Además puede ser una constante o un identificador.

Por último, tenemos un tipo especial similar a los arrays de C, que representa un agregado de datos del mismo tipo, ya sea unidimensional o bidimensional.

* Tabla de tokens:

| Nombre          | Expresión regular                                              | Código | Atributos                  |
|-----------------+----------------------------------------------------------------+--------+----------------------------|
| ~CABECERA~      | ~"programa()"~                                                 | ~257~  |                            |
| ~LLAVEIZQ~      | ~"{"~                                                          | ~258~  |                            |
| ~LLAVEDCH~      | ~"}"~                                                          | ~259~  |                            |
| ~INILOCAL~      | ~"var"~                                                        | ~261~  |                            |
| ~FINLOCAL~      | ~"finvar"~                                                     | ~262~  |                            |
| ~TIPO~          | ~"entero"~ \vert ~"real"~ \vert ~"buleano"~ \vert ~"caracter"~ | ~263~  | ~0:entero 1:real~          |
|                 |                                                                |        | ~2:bulean 3:caracter~      |
| ~IF~            | ~"si"~                                                         | ~264~  |                            |
| ~ELSE~          | ~"otro"~                                                       | ~265~  |                            |
| ~WHILE~         | ~"mientras"~                                                   | ~266~  |                            |
| ~SWITCH~        | ~"casos"~                                                      | ~267~  |                            |
| ~CASE~          | ~"caso"~                                                       | ~268~  |                            |
| ~BREAK~         | ~"roto"~                                                       | ~269~  |                            |
| ~CIN~           | ~"entrada"~                                                    | ~270~  |                            |
| ~COUT~          | ~"salida"~                                                     | ~271~  |                            |
| ~PREDET~        | ~"predeterminado"~                                             | ~272~  |                            |
| ~ASIG~          | ~"="~                                                          | ~273~  |                            |
| ~CORCHIZQ~      | ~"["~                                                          | ~274~  |                            |
| ~CORCHDCH~      | ~"]"~                                                          | ~275~  |                            |
| ~COMA~          | ~","~                                                          | ~276~  |                            |
| ~PYC~           | ~";"~                                                          | ~277~  |                            |
| ~PYP~           | ~":"~                                                          | ~278~  |                            |
| ~PARIZQ~        | ~"("~                                                          | ~279~  |                            |
| ~PARDCH~        | ~")"~                                                          | ~280~  |                            |
| ~SIGNO~         | ~"-"~                                                          | ~281~  |                            |
| ~DIGITO~        | ~[0-9]~                                                        | ~282~  |                            |
| ~PUNTO~         | ~"."~                                                          | ~283~  |                            |
| ~IDENTIFICADOR~ | ~[a-zA-Z_][a-zA-Z0-9_]*~                                       | ~284~  |                            |
|                 | ~-?[0-9]+(.[0-9]+)?~ \vert ~"verdadero"~ \vert ~"falso"~       |        | ~0:real_num 1:verdadero~   |
| ~LITERAL~       | \vert ~(\"(\\\"~ \vert ~\\\'~ \vert ~[^\"\'])+\")~             | ~285~  | ~2:falso 3:cte_cadena~     |
|                 | \vert ~(\'(\\\"~ \vert ~\\\'~ \vert ~[^\"\'])\')~              |        | ~4:cte_caracter~           |
| ~RETURN~        | ~"devolver"~                                                   | ~286~  |                            |
| ~OPREL~         | ~[<>]=?~ \vert ~[=!]=~                                         | ~287~  |                            |
| ~OPBIN~         | ~"+"~ \vert ~"-"~ \vert ~"*"~ \vert ~"/"~ \vert ~"**"~         | ~288~  | ~0:+ 1:- 2:* 3:/ 4:**~     |
| ~OPLOG~         | ~"^"~ \vert ~"~ \vert\vert ~"~ \vert ~"&&"~                    | ~289~  | ~0:^ 1:~ \vert\vert ~2:&&~ |
| ~OPUNARIOIZQ~   | ~"!"~ \vert ~"-"~ \vert ~"++"~ \vert ~"--"~                    | ~290~  | ~0:! 1:- 2:++ 3:--~        |
| ~OPUNARIODCH~   | ~"++"~ \vert ~"--"~                                            | ~291~  | ~0:++ 1:--~                |
| ~ARRAY1D~       | ~\[[0-9]+\]~                                                   | ~292~  |                            |
| ~ARRAY2D~       | ~\[[0-9]+,[0-9+]\]~                                            | ~293~  |                            |
